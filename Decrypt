// ***********************************************
// Program Abstract
// This program decrypts a message by entering the key to the encrypted code.
// ***********************************************

// ***********************************************
// Program Variable Dictionary
// topSecret is the decode object
// codeLine1-4 is the encrypted line
// line1-4 is the decoded line
// key is the key to the encryption
// loop is the ASC value after you transverse the codes 32 or 127
// real is the line after its decoded
// workKey is the value of A - the key[j] value
// turner is the char after it is decoded
// ***********************************************
import java.io.*;
import java.util.Scanner;
public class ch_28_B {
    public static void main(String[] args) throws IOException
    {
    	Decode topSecret = new Decode();
		topSecret.readFromFile();
		topSecret.displayEncodedText();
		topSecret.enterKey();
		topSecret.decodeText();
		topSecret.displayOriginalText();
    }
}
class Decode
{
	private String line1, line2, line3, line4;
	private String codeLine1, codeLine2, codeLine3, codeLine4;
	private String key;
	public Decode()
	{
		codeLine1 = line1 = codeLine2 = line2 = codeLine3 = line3 = codeLine4 = line4 = "";
	}
	public void displayOriginalText()
	{
		System.out.println("The original uncoded message is:\n");
		System.out.println(line1);
		System.out.println(line2);
		System.out.println(line3);
		System.out.println(line4);
		System.out.println();
	}
	public void enterKey()
	{
		Scanner input = new Scanner(System.in);
		System.out.print("Enter key --> ");
		// For the 90-point version the "key" is a single letter.
		// For the 100-point version, the "key" is a word.
		key = input.nextLine();
	}
	public String decodeLine(String encodeLine)
	{
		char k;
		int AscKey=0;
		int workKey =0;
		int change= 0;
		int j=0;
		int loop =0;
		char turner;
		String real ="";
		int len = encodeLine.length();
		for (int i = 0; i < len;i++)
		{
			if(j>=key.length())
			{
				j=0;
				k = key.charAt(j);
				AscKey = (int)k;
				workKey = ((int)('A')-AscKey);
				j++;
			}
			else
			{
				k = key.charAt(j);
				AscKey = (int)k;
				workKey = ((int)('A')-AscKey);
				j++;
			}
			if ((((int)encodeLine.charAt(i))+workKey) < 32)
			{
				change= 32-(((int)encodeLine.charAt(i))+workKey);

				if (change == 0)
				{
					turner = (char)0;
				}
				else
				{
					loop = 128-change;
					turner = (char)loop;
				}
			}
			else if((((int)encodeLine.charAt(i))+workKey) >= 127)
			{
				change = (((int)encodeLine.charAt(i))+workKey)-127;
				loop = change+31;
				turner = (char)loop;
			}
			else
			{
				turner = (char)(((int)encodeLine.charAt(i))+workKey);
			}
			real+=turner;
		}
		return real;
	}
	public void decodeText()
	{
		System.out.println("\nEncoding the Text\n");
		line1=decodeLine(codeLine1);
		line2=decodeLine(codeLine2);
		line3=decodeLine(codeLine3);
		line4=decodeLine(codeLine4);
	}
	public void displayEncodedText()
	{
		System.out.println("The ENCODED message is:\n");
		System.out.println(codeLine1);
		System.out.println(codeLine2);
		System.out.println(codeLine3);
		System.out.println(codeLine4);
		System.out.println();
	}
	public void readFromFile() throws IOException
	{
		BufferedReader inStream = new BufferedReader(new FileReader("code.dat"));
		System.out.println("Loading coded message\n");
		codeLine1= inStream.readLine();
		codeLine2= inStream.readLine();
		codeLine3= inStream.readLine();
		codeLine4= inStream.readLine();
		inStream.close();
	}
}
